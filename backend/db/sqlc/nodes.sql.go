// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: nodes.sql

package db

import (
	"context"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (
  name,
  hostname,
  bm_ip,
  bm_user,
  bm_pass,
  role,
  parent_type,
  parent_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, name, hostname, bm_ip, bm_user, bm_pass, role, parent_type, parent_id, status, created_at
`

type CreateNodeParams struct {
	Name       string `json:"name"`
	Hostname   string `json:"hostname"`
	BmIp       string `json:"bm_ip"`
	BmUser     string `json:"bm_user"`
	BmPass     string `json:"bm_pass"`
	Role       string `json:"role"`
	ParentType string `json:"parent_type"`
	ParentID   int32  `json:"parent_id"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode,
		arg.Name,
		arg.Hostname,
		arg.BmIp,
		arg.BmUser,
		arg.BmPass,
		arg.Role,
		arg.ParentType,
		arg.ParentID,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hostname,
		&i.BmIp,
		&i.BmUser,
		&i.BmPass,
		&i.Role,
		&i.ParentType,
		&i.ParentID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNode = `-- name: DeleteNode :exec

DELETE FROM nodes
WHERE id = $1
`

// -- name: UpdateAccount :one
// UPDATE accounts
// SET balance=$2
// WHERE id=$1
// RETURNING *;
func (q *Queries) DeleteNode(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getNodeById = `-- name: GetNodeById :one
SELECT id, name, hostname, bm_ip, bm_user, bm_pass, role, parent_type, parent_id, status, created_at FROM nodes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNodeById(ctx context.Context, id int32) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeById, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hostname,
		&i.BmIp,
		&i.BmUser,
		&i.BmPass,
		&i.Role,
		&i.ParentType,
		&i.ParentID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listNodes = `-- name: ListNodes :many
SELECT id, name, hostname, bm_ip, bm_user, bm_pass, role, parent_type, parent_id, status, created_at FROM nodes 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListNodesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNodes(ctx context.Context, arg ListNodesParams) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Hostname,
			&i.BmIp,
			&i.BmUser,
			&i.BmPass,
			&i.Role,
			&i.ParentType,
			&i.ParentID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
