// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: system-controller.sql

package db

import (
	"context"
)

const createSystemController = `-- name: CreateSystemController :one
INSERT INTO system_controller 
(name,oam_floating,install_file,deploy_file,bootstrap_file,link,status, failed_reason, admin_pass) 
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING id, name, oam_floating, install_file, deploy_file, bootstrap_file, link, status, failed_reason, admin_pass, created_at
`

type CreateSystemControllerParams struct {
	Name          string `json:"name"`
	OamFloating   string `json:"oam_floating"`
	InstallFile   string `json:"install_file"`
	DeployFile    string `json:"deploy_file"`
	BootstrapFile string `json:"bootstrap_file"`
	Link          string `json:"link"`
	Status        string `json:"status"`
	FailedReason  string `json:"failed_reason"`
	AdminPass     string `json:"admin_pass"`
}

func (q *Queries) CreateSystemController(ctx context.Context, arg CreateSystemControllerParams) (SystemController, error) {
	row := q.db.QueryRowContext(ctx, createSystemController,
		arg.Name,
		arg.OamFloating,
		arg.InstallFile,
		arg.DeployFile,
		arg.BootstrapFile,
		arg.Link,
		arg.Status,
		arg.FailedReason,
		arg.AdminPass,
	)
	var i SystemController
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OamFloating,
		&i.InstallFile,
		&i.DeployFile,
		&i.BootstrapFile,
		&i.Link,
		&i.Status,
		&i.FailedReason,
		&i.AdminPass,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSystemController = `-- name: DeleteSystemController :exec

DELETE FROM system_controller
WHERE id = $1
`

// LIMIT $1
// OFFSET $2;
func (q *Queries) DeleteSystemController(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSystemController, id)
	return err
}

const getSystemController = `-- name: GetSystemController :one
SELECT id, name, oam_floating, install_file, deploy_file, bootstrap_file, link, status, failed_reason, admin_pass, created_at FROM system_controller
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSystemController(ctx context.Context, id int32) (SystemController, error) {
	row := q.db.QueryRowContext(ctx, getSystemController, id)
	var i SystemController
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OamFloating,
		&i.InstallFile,
		&i.DeployFile,
		&i.BootstrapFile,
		&i.Link,
		&i.Status,
		&i.FailedReason,
		&i.AdminPass,
		&i.CreatedAt,
	)
	return i, err
}

const listSystemController = `-- name: ListSystemController :many
SELECT id, name, oam_floating, install_file, deploy_file, bootstrap_file, link, status, failed_reason, admin_pass, created_at FROM system_controller
ORDER BY id
`

func (q *Queries) ListSystemController(ctx context.Context) ([]SystemController, error) {
	rows, err := q.db.QueryContext(ctx, listSystemController)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemController{}
	for rows.Next() {
		var i SystemController
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OamFloating,
			&i.InstallFile,
			&i.DeployFile,
			&i.BootstrapFile,
			&i.Link,
			&i.Status,
			&i.FailedReason,
			&i.AdminPass,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystemControllerAdminPass = `-- name: UpdateSystemControllerAdminPass :one
UPDATE system_controller
SET admin_pass = $2
WHERE id = $1
RETURNING id, name, oam_floating, install_file, deploy_file, bootstrap_file, link, status, failed_reason, admin_pass, created_at
`

type UpdateSystemControllerAdminPassParams struct {
	ID        int32  `json:"id"`
	AdminPass string `json:"admin_pass"`
}

func (q *Queries) UpdateSystemControllerAdminPass(ctx context.Context, arg UpdateSystemControllerAdminPassParams) (SystemController, error) {
	row := q.db.QueryRowContext(ctx, updateSystemControllerAdminPass, arg.ID, arg.AdminPass)
	var i SystemController
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OamFloating,
		&i.InstallFile,
		&i.DeployFile,
		&i.BootstrapFile,
		&i.Link,
		&i.Status,
		&i.FailedReason,
		&i.AdminPass,
		&i.CreatedAt,
	)
	return i, err
}

const updateSystemControllerInventory = `-- name: UpdateSystemControllerInventory :one
UPDATE system_controller
SET oam_floating = $2
WHERE id = $1
RETURNING id, name, oam_floating, install_file, deploy_file, bootstrap_file, link, status, failed_reason, admin_pass, created_at
`

type UpdateSystemControllerInventoryParams struct {
	ID          int32  `json:"id"`
	OamFloating string `json:"oam_floating"`
}

func (q *Queries) UpdateSystemControllerInventory(ctx context.Context, arg UpdateSystemControllerInventoryParams) (SystemController, error) {
	row := q.db.QueryRowContext(ctx, updateSystemControllerInventory, arg.ID, arg.OamFloating)
	var i SystemController
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OamFloating,
		&i.InstallFile,
		&i.DeployFile,
		&i.BootstrapFile,
		&i.Link,
		&i.Status,
		&i.FailedReason,
		&i.AdminPass,
		&i.CreatedAt,
	)
	return i, err
}
