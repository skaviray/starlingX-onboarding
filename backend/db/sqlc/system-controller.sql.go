// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: system-controller.sql

package db

import (
	"context"
)

const createSystemController = `-- name: CreateSystemController :one
INSERT INTO system_controller 
(name,ip_address,status) 
VALUES ($1,$2,$3) RETURNING id, name, ip_address, status, created_at
`

type CreateSystemControllerParams struct {
	Name      string `json:"name"`
	IpAddress string `json:"ip_address"`
	Status    string `json:"status"`
}

func (q *Queries) CreateSystemController(ctx context.Context, arg CreateSystemControllerParams) (SystemController, error) {
	row := q.db.QueryRowContext(ctx, createSystemController, arg.Name, arg.IpAddress, arg.Status)
	var i SystemController
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IpAddress,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSystemController = `-- name: DeleteSystemController :exec

DELETE FROM system_controller
WHERE id = $1
`

// LIMIT $1
// OFFSET $2;
func (q *Queries) DeleteSystemController(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSystemController, id)
	return err
}

const getSystemController = `-- name: GetSystemController :one
SELECT id, name, ip_address, status, created_at FROM system_controller
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSystemController(ctx context.Context, id int32) (SystemController, error) {
	row := q.db.QueryRowContext(ctx, getSystemController, id)
	var i SystemController
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IpAddress,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listSystemController = `-- name: ListSystemController :many
SELECT id, name, ip_address, status, created_at FROM system_controller
ORDER BY id
`

func (q *Queries) ListSystemController(ctx context.Context) ([]SystemController, error) {
	rows, err := q.db.QueryContext(ctx, listSystemController)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemController{}
	for rows.Next() {
		var i SystemController
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IpAddress,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
