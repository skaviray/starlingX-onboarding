// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subclouds.sql

package db

import (
	"context"
)

const createSubcloud = `-- name: CreateSubcloud :one
INSERT INTO subcloud 
(name,system_controller_id, ip_address, sync_status) 
VALUES ($1,$2,$3,$4) RETURNING id, name, system_controller_id, ip_address, sync_status, created_at
`

type CreateSubcloudParams struct {
	Name               string `json:"name"`
	SystemControllerID int32  `json:"system_controller_id"`
	IpAddress          string `json:"ip_address"`
	SyncStatus         string `json:"sync_status"`
}

func (q *Queries) CreateSubcloud(ctx context.Context, arg CreateSubcloudParams) (Subcloud, error) {
	row := q.db.QueryRowContext(ctx, createSubcloud,
		arg.Name,
		arg.SystemControllerID,
		arg.IpAddress,
		arg.SyncStatus,
	)
	var i Subcloud
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SystemControllerID,
		&i.IpAddress,
		&i.SyncStatus,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubcloud = `-- name: DeleteSubcloud :exec

DELETE FROM subcloud
WHERE id = $1
`

// LIMIT $1
// OFFSET $2;
func (q *Queries) DeleteSubcloud(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubcloud, id)
	return err
}

const getSubcloud = `-- name: GetSubcloud :one
SELECT id, name, system_controller_id, ip_address, sync_status, created_at FROM subcloud
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSubcloud(ctx context.Context, id int32) (Subcloud, error) {
	row := q.db.QueryRowContext(ctx, getSubcloud, id)
	var i Subcloud
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SystemControllerID,
		&i.IpAddress,
		&i.SyncStatus,
		&i.CreatedAt,
	)
	return i, err
}

const listSubclouds = `-- name: ListSubclouds :many
SELECT id, name, system_controller_id, ip_address, sync_status, created_at FROM subcloud
ORDER BY id
`

func (q *Queries) ListSubclouds(ctx context.Context) ([]Subcloud, error) {
	rows, err := q.db.QueryContext(ctx, listSubclouds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subcloud{}
	for rows.Next() {
		var i Subcloud
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SystemControllerID,
			&i.IpAddress,
			&i.SyncStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
