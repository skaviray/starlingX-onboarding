// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: nodes.sql

package db

import (
	"context"
)

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM nodes
WHERE id = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getNodeById = `-- name: GetNodeById :one
SELECT id, name, hostname, bm_ip, bm_user, bm_pass, link, role, parent_type, parent_id, status, created_at FROM nodes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNodeById(ctx context.Context, id int32) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeById, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hostname,
		&i.BmIp,
		&i.BmUser,
		&i.BmPass,
		&i.Link,
		&i.Role,
		&i.ParentType,
		&i.ParentID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateNodeProperties = `-- name: UpdateNodeProperties :one
UPDATE nodes 
SET hostname=$2,
bm_ip=$3,
bm_user=$4,
bm_pass=$5,
role=$6,
parent_type=$7,
parent_id=$8,
status=$9
WHERE id=$1 
RETURNING id, name, hostname, bm_ip, bm_user, bm_pass, link, role, parent_type, parent_id, status, created_at
`

type UpdateNodePropertiesParams struct {
	ID         int32  `json:"id"`
	Hostname   string `json:"hostname"`
	BmIp       string `json:"bm_ip"`
	BmUser     string `json:"bm_user"`
	BmPass     string `json:"bm_pass"`
	Role       string `json:"role"`
	ParentType string `json:"parent_type"`
	ParentID   int32  `json:"parent_id"`
	Status     string `json:"status"`
}

func (q *Queries) UpdateNodeProperties(ctx context.Context, arg UpdateNodePropertiesParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, updateNodeProperties,
		arg.ID,
		arg.Hostname,
		arg.BmIp,
		arg.BmUser,
		arg.BmPass,
		arg.Role,
		arg.ParentType,
		arg.ParentID,
		arg.Status,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hostname,
		&i.BmIp,
		&i.BmUser,
		&i.BmPass,
		&i.Link,
		&i.Role,
		&i.ParentType,
		&i.ParentID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
